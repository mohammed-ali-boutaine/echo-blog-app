generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?   
  avatar    String?   
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]
  comments  Comment[]
  sessions  Session[]
  accounts  Account[] 
  likes     Like[]    
  savedBlogs SavedBlog[] 
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  isValid      Boolean  @default(true)
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Blog {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  coverImage String?  
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  tags      Tag[]     @relation("BlogsOnTags")
  comments  Comment[]
  likes     Like[]    
  savedBy   SavedBlog[] 
  slug      String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  blogs Blog[] @relation("BlogsOnTags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String  // "oauth", "email", etc.
  provider          String  // "google", "github", "local"
  providerAccountId String  // Provider's user ID
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, blogId]) 
  @@index([blogId])
  @@index([userId])
}

model SavedBlog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, blogId]) 
  @@index([blogId])
  @@index([userId])
}